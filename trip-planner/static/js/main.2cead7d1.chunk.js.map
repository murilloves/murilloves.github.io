{"version":3,"sources":["components/organisms/countrySelect/helpers.js","store/countries.js","services/restapi/currency.js","services/restapi/index.js","services/graphql/countries.js","components/atoms/selectbox/index.jsx","components/organisms/countrySelect/index.jsx","App.js","index.js"],"names":["CountryFactory","name","code","currency","emoji","capital","id","Math","floor","random","getCountry","countryName","allCountries","find","country","indexOf","composeCountryString","getFirstCurrency","split","composeRateString","mainCountry","favoriteCountry","rates","mainCurrency","favoriteCurrency","toFixed","rateString","MAIN_COUNTRY","FAVORITE_COUNTRIES","countryStore","create","set","setAllCountries","countries","JSON","parse","localStorage","getItem","setMainCountry","setItem","stringify","favoriteCountries","setFavoriteCountries","fetchCurrencies","a","fromCurrency","toCurrencies","map","favorite","join","performGetRequest","res","console","error","url","fetch","method","headers","response","json","GQL_LIST_COUNTRIES","gql","countriesClient","ApolloClient","cache","InMemoryCache","uri","SelectBox","options","onChange","value","selectIndex","placeholder","useState","inputValue","setInputValue","borderColor","list","ev","target","item","CountrySelect","useQuery","client","data","loading","setRates","state","storeMainCountry","storeAllCountries","storeFavoriteCountries","onChangeMainCountry","updatedMainCountry","updateCurrencies","onChangeFavoriteCountry","index","updatedFavoriteCountries","useEffect","message","size","p","display","bg","color","borderRadius","onClick","filter","c","loopIndex","onRemoveFavoriteCountry","border","colorScheme","length","newCountry","disabled","w","h","align","justify","ml","App","m","textAlign","fontSize","fontWeight","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2cead7d1.chunk.js","sourcesContent":["const genID = () => Math.floor(1000000 * Math.random()) + 1000000\n\nconst MAX_FAVORITE_COUNTRIES = 5\n\nconst CountryFactory = ({ name= '', code= '', currency= '', emoji= '', capital= '' }) => ({\n\tid: genID(),\n\tname,\n\tcode,\n\tcapital,\n\temoji,\n\tcurrency\n})\n\nconst getCountry = (countryName, allCountries) => {\n\tconst country = allCountries.find(country => countryName.indexOf(country.emoji) >= 0)\n\treturn country || {}\n}\n\nconst composeCountryString = country => country.currency && `${country.emoji}   ${country.name}`\n\nconst rateString = (rates, currency) => {\n\treturn `${rates[currency].toFixed(2)} ${currency}`\n}\n\nconst getFirstCurrency = country => {\n\tconst { currency } = country\n\treturn currency?.split(',')?.[0]\n}\n\nconst composeRateString = (mainCountry, favoriteCountry, rates) => {\n\tconst mainCurrency = getFirstCurrency(mainCountry)\n\tconst favoriteCurrency = getFirstCurrency(favoriteCountry)\n\n\tif (mainCurrency === favoriteCurrency) {\n\t\treturn `1 ${mainCurrency}`\n\t}\n\tif (favoriteCurrency) {\n\t\tif (rates[favoriteCurrency]) {\n\t\t\treturn rateString(rates, favoriteCurrency)\n\t\t}\n\t\treturn 'N/A'\n\t}\n\treturn ''\n}\n\nexport { MAX_FAVORITE_COUNTRIES }\nexport { CountryFactory }\nexport { getCountry }\nexport { getFirstCurrency }\nexport { composeCountryString }\nexport { composeRateString }\n","import create from \"zustand\";\nimport { CountryFactory } from \"../components/organisms/countrySelect/helpers\"; \n\nconst MAIN_COUNTRY = '_main_countries'\nconst FAVORITE_COUNTRIES = '_favorite_countries'\n\nconst countryStore = create(set => ({\n  allCountries: [],\n  setAllCountries: (countries = {}) => set(() => ({ allCountries: countries })),\n\n  mainCountry: JSON.parse(localStorage.getItem(MAIN_COUNTRY)) || CountryFactory({}),\n  setMainCountry: country => set(() => {\n    localStorage.setItem(MAIN_COUNTRY, JSON.stringify(country))\n    return { mainCountry: country }\n  }),\n\n  favoriteCountries: JSON.parse(localStorage.getItem(FAVORITE_COUNTRIES)) || [],\n  setFavoriteCountries: countries => set(() => {\n    localStorage.setItem(FAVORITE_COUNTRIES, JSON.stringify(countries))\n    return { favoriteCountries: countries }\n  }),\n}));\n\nexport { countryStore };\n","import { performGetRequest } from './index'\n\nconst CURRENCY_BASE_URL = 'https://api.frankfurter.app/latest'\n\nconst fetchCurrencies = async (mainCountry, favoriteCountries) => {\n\tconst fromCurrency = mainCountry?.currency.split(',')[0]\n\tconst toCurrencies = favoriteCountries\n\t\t.map(favorite => favorite.currency)\n\t\t.join(',')\n\n\tif (fromCurrency && toCurrencies) {\n\t\ttry {\n\t\t\tconst res = await performGetRequest(`${CURRENCY_BASE_URL}?from=${fromCurrency}&to=${toCurrencies}`)\n\t\t\treturn res?.rates\n\t\t} catch (err) {\n\t\t\tconsole.error(err)\n\t\t\treturn { error: err }\n\t\t}\n\t}\n}\n\nexport { fetchCurrencies }\n","const performGetRequest = async (url = '') => {\n\tconst response = await fetch(url, {\n\t\tmethod: 'GET',\n\t\theaders: { 'Content-Type': 'application/json' },\n\t})\n\n\treturn response.json()\n}\n\nexport * from './currency'\nexport { performGetRequest }\n","import { ApolloClient, InMemoryCache, gql } from '@apollo/client';\n\nconst GQL_LIST_COUNTRIES = gql`\n  {\n    countries {\n      name\n      code\n      capital\n      emoji\n      currency\n    }\n  }\n`;\n\nconst COUNTRIES_URI = 'https://countries.trevorblades.com'\n\nconst countriesClient = new ApolloClient({\n  cache: new InMemoryCache(),\n  uri: COUNTRIES_URI\n});\n\nexport { GQL_LIST_COUNTRIES, countriesClient }\n","import { useState } from 'react'\nimport { Input } from '@chakra-ui/react'\n\nconst CURRENCY = 'Currency'\n\nconst SelectBox = ({\n  options = [],\n  onChange,\n  value,\n  selectIndex,\n  placeholder\n}) => {\n  const [inputValue, setInputValue] = useState(value || '')\n\n  const onChangeInput = (ev) => {\n    const inputValue = ev.target.value\n    setInputValue(inputValue)\n\n    onChange(inputValue, selectIndex)\n  }\n\n  return (\n    <>\n      <Input borderColor=\"transparent\" placeholder={placeholder} list=\"main-country\" value={inputValue} onChange={onChangeInput} />\n      <datalist id=\"main-country\">\n        { options.map((item) => (\n          <option\n            key={item.name}\n            value={`${item.emoji}   ${item.name}`}>\n              {`${CURRENCY}: ${item.currency}`}\n          </option>\n        ))}\n      </datalist>\n    </>\n  )\n\n}\n\nexport { SelectBox }\n","import React, {useState, useEffect} from 'react';\nimport { useQuery } from '@apollo/client';\n\nimport { countryStore } from '../../../store/countries';\nimport { fetchCurrencies } from '../../../services/restapi';\nimport { countriesClient, GQL_LIST_COUNTRIES } from '../../../services/graphql';\n\nimport { SelectBox } from '../../atoms';\nimport {\n  MAX_FAVORITE_COUNTRIES,\n  CountryFactory,\n  getCountry,\n  composeCountryString,\n  composeRateString\n} from './helpers';\n\nimport {\n  Table,\n  Thead,\n  Tbody,\n  Tr,\n  Th,\n  Td,\n  Box,\n  Button,\n  Flex,\n  Text\n} from '@chakra-ui/react'\n\nconst CountrySelect = () => {\n  const {data, loading, error} = useQuery(GQL_LIST_COUNTRIES, {client: countriesClient});\n  const [rates, setRates] = useState({})\n\n  const mainCountry = countryStore(state => state.mainCountry)\n  const storeMainCountry = countryStore(state => state.setMainCountry)\n\n  const allCountries = countryStore(state => state.allCountries)\n  const storeAllCountries = countryStore(state => state.setAllCountries)\n\n  const favoriteCountries = countryStore(state => state.favoriteCountries)\n  const storeFavoriteCountries = countryStore(state => state.setFavoriteCountries)\n\n  const onChangeMainCountry = async (value) => {\n    const country = getCountry(value, allCountries)\n    if (country?.currency) {\n      const updatedMainCountry = CountryFactory(country)\n      storeMainCountry(CountryFactory(updatedMainCountry))\n\n      updateCurrencies(updatedMainCountry, favoriteCountries)\n    }\n  }\n\n  const onChangeFavoriteCountry = async (value, index) => {\n    let updatedFavoriteCountries = favoriteCountries\n    const country = getCountry(value, allCountries)\n\n    if (country?.currency) {\n      updatedFavoriteCountries[index] = CountryFactory(country)\n      storeFavoriteCountries(updatedFavoriteCountries)\n\n      updateCurrencies(mainCountry, updatedFavoriteCountries)\n    }\n  }\n\n  const onAddFavoriteCountry = () => {\n    if (favoriteCountries.length < MAX_FAVORITE_COUNTRIES) {\n      const newCountry = CountryFactory({})\n      const updatedFavoriteCountries = [...favoriteCountries, newCountry]\n      storeFavoriteCountries(updatedFavoriteCountries)\n    }\n  }\n\n  const onRemoveFavoriteCountry = index => {\n    const updatedFavoriteCountries = favoriteCountries.filter((c, loopIndex) => loopIndex !== index)\n    storeFavoriteCountries(updatedFavoriteCountries)\n  }\n\n  const updateCurrencies = async (mainCountry, favoriteCountries) => {\n    const rates = await fetchCurrencies(mainCountry, favoriteCountries)\n    setRates(rates)\n  }\n\n  useEffect(() => {\n    if (data?.countries) {\n      storeAllCountries(data.countries)\n    }\n  }, [data, storeAllCountries])\n\n  useEffect(() => {\n    updateCurrencies(mainCountry, favoriteCountries)\n  }, [mainCountry, favoriteCountries])\n\n  if (loading || error) {\n    return <p>{error ? error.message : 'Loading...'}</p>;\n  }\n\n  return (\n    <>\n      <Box>\n        <Table size='sm'>\n          <Thead>\n            <Tr>\n              <Th p={['1rem', '1rem 2rem']}>Country</Th>\n              <Th display={['none', 'table-cell']} p='1rem'>Capital</Th>\n              <Th p='1rem'>Amount</Th>\n              <Th display={['none', 'table-cell']} p='1rem'></Th>\n            </Tr>\n          </Thead>\n          <Tbody>\n            <Tr bg='navy' color='white'>\n              <Td p={['0.5rem 0', '0.5rem 1rem']} borderRadius='0.5rem 0 0 0.5rem'>\n                <SelectBox\n                  options={allCountries}\n                  onChange={onChangeMainCountry}\n                  value={composeCountryString(mainCountry)}\n                  placeholder='Select your main country'\n                />\n              </Td>\n              <Td display={['none', 'table-cell']}> {mainCountry.capital} </Td>\n              <Td> 1 {mainCountry?.currency?.split(',')[0]} </Td>\n              <Td borderRadius='0 0.5rem 0.5rem 0'></Td>\n            </Tr>\n            { favoriteCountries.map((favoriteCountry, index) => (\n              <Tr key={favoriteCountry.id}>\n                <Td p={[0, '0 1rem']}>\n                  <SelectBox\n                    onChange={onChangeFavoriteCountry}\n                    options={allCountries}\n                    selectIndex={index}\n                    value={composeCountryString(favoriteCountry)}\n                    placeholder={`Favorite Country #${index + 1}`}\n                  />\n                </Td>\n                <Td display={['none', 'table-cell']}> { favoriteCountry?.capital } </Td>\n                <Td>\n                  { composeRateString(mainCountry, favoriteCountry, rates) }\n                </Td>\n                <Td>\n                  <Box onClick={() => onRemoveFavoriteCountry(index)}>\n                    <Button color='red' bg='white' p='0' borderRadius='full'>&#8854;</Button>\n                  </Box>\n                </Td>\n              </Tr>\n            ))}\n            <Tr>\n              <Td border='none' p='1rem 0.75rem'>\n                { mainCountry.currency && (\n                  <Button\n                    colorScheme='white'\n                    onClick={onAddFavoriteCountry}\n                    disabled={favoriteCountries.length >= MAX_FAVORITE_COUNTRIES}>\n                    <Flex bg='dodgerblue' w='1.75rem' h='1.75rem' align='center' justify='center' borderRadius='full'>&#8853;</Flex>\n                    <Text color='dodgerblue' ml='0.5rem'>Add Favorite Country</Text>\n                  </Button>\n                )}\n              </Td>\n            </Tr>\n          </Tbody>\n        </Table>\n      </Box>\n    </>\n  );\n}\n\nexport { CountrySelect }\n","import React from 'react';\nimport { CountrySelect } from './components/organisms/countrySelect';\n\nimport { ChakraProvider, Box, Text } from '@chakra-ui/react'\n\nfunction App() {\n  return (\n    <ChakraProvider>\n      <Box m={[0, '2rem']}>\n        <Text textAlign='center' fontSize='3xl' fontWeight='bold' m='1rem'>Trip Planner</Text>\n        <Text m='2rem' color='gray' fontSize='sm'> Going to another country? We can help you with currency and more... </Text>\n        <CountrySelect />\n      </Box>\n    </ChakraProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n// import reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n// reportWebVitals();\n"],"sourceRoot":""}